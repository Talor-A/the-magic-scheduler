// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]

}

// --------------------------------------

model Organization {
  id   Int    @id @default(autoincrement())
  name String

  membership Membership[]
  Course     Course[]
}

model Membership {
  id   Int            @id @default(autoincrement())
  role MembershipRole

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  // When the user joins, we will clear out the name and email and set the user.
  invitedName  String?
  invitedEmail String?

  Event   Event? @relation(fields: [eventId], references: [id])
  eventId Int?
  @@unique([organizationId, invitedEmail])
}

enum MembershipRole {
  OWNER
  ADMIN
  USER
}

// The owners of the SaaS (you) can have a SUPERADMIN role to access all data

enum GlobalRole {
  SUPERADMIN
  CUSTOMER
}

model User {
  id             Int        @id @default(autoincrement())
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  name           String?
  email          String     @unique
  hashedPassword String?
  role           GlobalRole

  memberships Membership[]
  Session     Session[]
  tokens      Token[]

}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
}

model Course {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int

  events Event[]
}

model Event {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    Int
  instructors Membership[]


  startsAt DateTime @default(now())
  endsAt   DateTime @default(now())

  repeatId Int?
  repeats  Repeats? @relation(fields: [repeatId], references: [id], onDelete: Cascade)

  allDay Boolean @default(false)
}

model Repeats {
  id    Int        @id @default(autoincrement())
  event Event?
  type  RepeatType
  days  Int[]
  until DateTime?
}

enum RepeatType {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}
